# Default values for microservicesruntime.

# -- Number of replicates in Deployment
replicaCount: 1

# -- StatefulSet or Deployment. You should only change this if you require Client Side queuing (CSQ) or functionality in IS which requires stable hostnames and filesystems. Default is false => Deployment. Keep in mind, you must disable CSQ on each webMethods messaging and JMS connection if you don't use stateful-sets. See examples in Process Engine deployment for disableing QSC.
statefulSet: false

image:
  # -- Pull this image. Default is MSR from [Software AG Container Registry](https://containers.softwareag.com)
  repository: "sagcr.azurecr.io/webmethods-microservicesruntime"
  # -- Pull with policy
  pullPolicy: IfNotPresent
  # -- The default value pulls latest. In PROD it is recommended to use a specific fix level.
  tag:        "10.15"

# For grace termination period in seconds
terminationGracePeriodSeconds: 30

# Number of revisions to be retained
revisionHistoryLimit: 3

# Global parameters for image transfer job. 
#globalPreSync: 
  # Specify whether true or false to consider this as a argocd presync event.
  #enabled: false
  
# Add the presync jobs here
#preSyncJobs:

# -- Image pull secret reference. By default looks for `regcred`.
imagePullSecrets: 
  - name: regcred

# -- Overwrites Chart name of release name in workload name. As default, the workload name is release name + '-' + Chart name. The workload name is at the end release name + '-' + value of `nameOverride`.
nameOverride: ""
# -- Overwrites full workload name. As default, the workload name is release name + '-' + Chart name.
fullnameOverride: ""

# -- The name of the main container, by default this will be msr-<release_name>
containerName: 

# -- Extra Labels
extraLabels: {}

# -- Exta volumes that should be mounted.
extraVolumes: []
# - name: extras
#   emptyDir: {}

# -- Exta environment properties to be passed on to the microservice runtime
extraEnvs: []
#  - name: extraEnvironmentVariable
#    value: "myvalue"

# -- Extra Ports to be defined, note: these ports need to be created 
extraPorts: []

terracotta: {}

# -- Extra persistent volumes to be deployed with the release.
# Ensure that the PersistentVolume 'name' has a unique name (e.g. by using the Release Namespace)
# Example: 
# pv-integration-msr:
#   name: pv-integration-msr-{{ .Release.Namespace }}
#   storageClassName: ""
#   accessModes:
#   - ReadWriteMany
#   capacity:
#     storage: 500Gi
#   mountOptions:
#   - nfsvers=4.0
#   - sec=sys
#   nfs:
#     path: /uniqa_wms_bpm_cfgt
#     server: atrfs238.prod01.r-dc.net
#   persistentVolumeReclaimPolicy: Retain
#   volumeMode: Filesystem
extraPersistentVolumes: {}

# -- Extra PersistentVolumeClaims to be created with the release
# Example: 
# pvc-integration-msr:
#   accessModes:
#   - ReadWriteMany
#   resources:
#     requests:
#       storage: 500Gi
#   storageClassName: ""
#   volumeMode: Filesystem
#   volumeName: pv-integration-msr-{{ .Release.Namespace }}
# 
# Reference the extra PVC as follows:
# extraVolumes:
# - name: data
#   persistentVolumeClaim:
#     claimName: pvc-integration-msr
# 
# Mount the volume:
# extraVolumeMounts:
# - mountPath: /mnt/data
#   name: data
# 
# Ensure that the correct security context is set 
# if required by NFS or the like, this will usually vary between environments
# securityContext:
#   runAsGroup: 666
#   runAsUser: 50302
extraPersistentVolumeClaims: {}

# -- Extra Role Bindings
# Example: 
# nas-binding: 
#   name: msr-nas-{{ .Release.Namespace }}
#   kind: ClusterRoleBinding
#   roleRef:
#     apiGroup: rbac.authorization.k8s.io
#     kind: ClusterRole
#     name: system:openshift:scc:scc-uits-integration-msr-nas
#   subjects:
#   - kind: ServiceAccount
#     name: default
#     namespace: "{{ .Release.Namespace }}"
extraRoleBindings: {}

# -- Secret mounts, A list of secrets and their paths to mount inside the pod
secretMounts: []
#  - name: default-secrets
#    secretName: elastic-certificates
#    path: /usr/share/elasticsearch/config/certs
#    defaultMode: 0755

# -- Secret volumes, A list of secrets
secretVolumes: []
# - name: msr-secrets
#   secretName: msr-secrets

# -- Extra volume mounts
# Excepts an array or named table for backward compatibility. 
# Table usage will allow splitting up volume mounts into multiple values files, 
# thus allowing defaults .
# 
# extraVolumeMounts:
#  somename: 
#   - name: extras
#     mountPath: /usr/share/extras
#     readOnly: true
#  
# or array (old):
#
# extraVolumeMounts:
# - name: extras
#   mountPath: /usr/share/extras
#   readOnly: true
extraVolumeMounts: {}

# -- Volume Claim Templates, only to be used when running as a Statefulset (e.g. using client-side queuing)
volumeClaimTemplates: []
#    - metadata:
#        name: my-volume
#      spec:
#        accessModes:
#          - ReadWriteOnce
#        resources:
#          requests:
#            storage: 1Gi

# -- Extra containers which should run in addtion to the main container as a sidecar
# - name: do-something
#   image: busybox
#   command: ['do', 'something']
extraContainers: []

# -- Extra init containers that are executed before starting the main container
# - name: do-something
#   image: busybox
#   command: ['do', 'something']
extraInitContainers: []

# -- Extra config maps for addtional configurations such as extra ports, etc.
# The key will used as the config maps name. You can use automount: true
# to generate automatically config map volumes and volume mounts.
# If automountDir is not set, it will default to the value of extraConfigMapAutomountDir.
# If you do not set automount, you will need to configure extraVolumes and extraVolumeMounts manually.
# Example:
# configmap2:
#   automount: true
#   automountDir: /mnt/config
#   data:
#     blabla1.csv:
#       blax: blu
#     second.csv:
#       sippi: dadu
extraConfigMaps: {}

opsAutomountDir: /tmp/operations-config
 
# -- The default mount directory for extra config maps if automount is set in the extraConfig
extraConfigMapAutomountDir: /mnt/config

# -- Secret configurations required for MSR and Solution.
# The key will used as the secret name. You can use automount: true
# to generate automatically config map volumes and volume mounts.
# If automountDir is not set, it will default to the value of secret AutomountDir.
# If you do not set automount, you will need to configure secretVolumes and secretMounts manually.
# Example:
# secrets:
#   msr-secrets:
#     automount: true
#     automountDir: /etc/secrets
#     kind: SealedSecret | Secret
#     data:
#       param1: param1value
#       param2: param2value
secrets: {}

# -- The default mount directory for secret if automount is set in the secrets
secretAutomountDir: /etc/secrets


# -- Extra command, which is executed before the startContainer entrypoint script of the Microservice Runtime
extraCommand: ""

# -- lifecycle hooks to execute on preStop / postStart,...
lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
# postStart:
#   exec:
#     command:
#       - bash
#       - -c
#       - |
#         #!/bin/bash
#         # Sync PDTs at startup
#         IS_URL=http://localhost:5555
#         curl -XGET "$IS_URL/invoke/pub.publish:syncToProvider"

# -- readiness probe for container, by default this will simply check for tcp socket connection. Adjust this in order to avoid routing traffing to non-ready Integration Servers (e.g. use the ping service via http call)
readinessProbe:
  tcpSocket:
    port: http
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 1

# -- liveness probe for container
livenessProbe:
  httpGet:
    path: /health/liveness
    port: http
    scheme: HTTP
  failureThreshold: 3
  initialDelaySeconds: 60
  periodSeconds: 30
  successThreshold: 1
  timeoutSeconds: 10  

# -- startup probe for container
startupProbe:
  tcpSocket:
    port: http
  failureThreshold: 60
  periodSeconds: 30            # wait 30 * 60 seconds for starting readinessProbe and livenessProbe
  initialDelaySeconds: 60
  timeoutSeconds: 10

# If auto provision of pod is required on config change, enable this parameter. It checks configmap.yaml, configmaps-extra.yaml and secret.yaml
# checksum: true

microservicesruntime:
  # -- Defines external runtime port
  httpsPort:                5556
  # -- Defines scheme of runtime port 
  httpsPortScheme:          "HTTPS"
  # -- Defines administration port
  httpPort:                 5555
  # -- Defines scheme of administration port
  httpPortScheme:          "HTTP"
  # -- Defies diagnostic port
  diagnosticPort:           9999
  
  readinessProbe:
    # -- Scheme of administration port port, uppercase
    scheme:                 "HTTP"
  # -- Name of config map which contains the license key. If you ommit this, it defaults to the release name + microservicesruntime-license. 
  licenseConfigMap:         "microservicesruntime-license-key"
  memoryHeap:
    ## -- Minimum of allocated heap memory
    min:                    "512M"
    # -- Maximum of heap memory
    max:                    "512M"

  # -- Defines installation folder which was using on image creation
  installDir:      /opt/softwareag/IntegrationServer # This is the installation directory which you use on creating the image
  # -- This is the configuration directory which you use to place the multiple application properties files. Use this path to provide properties which should override values. The path is the last path in the property value chain and overrides all other values.
  configDir: /opt/softwareag/IntegrationServer/msr-config 
  # -- This is the configuration directory for base configurations which you use to place the multiple application properties files. The path is used before all other pathes. Use this in your base image to provide defaults.
  baseConfigDir: /opt/softwareag/IntegrationServer/base-config 

  # -- List of application properties which are added into config map in YAML format. See [Integration Server Configuration Variables](https://documentation.softwareag.com/webmethods/integration_server/pie10-15/webhelp/pie-webhelp/index.html#page/pie-webhelp%2Fre-configuration_variables_assets.html)
  properties: {}
  # -- Use "flat" application properties file as generated by configuration variable templates. Note: "properties" takes precedence over the propertiesFile values. Template function, 
  # you can reference other values using template syntax (e.g. using curly braces)
  #  content: |
  #    truststore.DEFAULT_JVM_TRUSTSTORE.ksPassword=$secret{TruststorePasswordSecretName}
  #    property=value
  #    anotherproperty=value
  #    image={{ .Values.image.repository }} # referencing other values
  propertiesFile: 
    content: |
      # application properties file 
  # -- list of custom java opts e.g. "-Dmy.prop1=value1" "-Dmy.prop2=value2"
  javaCustomOpts:
  # example:   
  #  - "-Dmy.prop1=value1"
  #  - "-Xss265"

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- pod annotations
podAnnotations: {}

podSecurityContext:
  fsGroup: 1724

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 5555

ingress:
  enabled: true
  defaultHostname: msr.mydomain.com
  className: ""
  annotations: {}
  hosts:
    # -- Hostname of Ingress. By default the defaultHostname is used. For more complex rules or addtional hosts, you will need to overwrite this section.
    - host: ""
      # --  Address the backend
      paths:
        # -- Path to address the backend
        - path: /
          # -- Path type to address the backend
          pathType: Prefix
          # -- Port of service
          port: 5555
  # -- TLS of Ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

route:
  # -- enables OpenShift route
  enabled: false    
  annotations: {}
  # -- Hostname of Route.
  host: msr.mydomain.com
  port: 5555
  tls:
    # -- TLS Termination. Values can be reencrypt, passthrough or edge
    termination: ""
    key: ""
    certificate: ""
    caCertificate: ""
    destinationCertificate: ""


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #
  # msrContainer:
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi
  # nginxContainer:
  #   requests:
  #     cpu: 500m
  #     memory: 2Gi
  #   limits:
  #     # use a high cpu limit to avaoid the container being throttled
  #     cpu: 8
  #     memory: 4Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# -- Deploy Nginx as external LB
externalLoadBalancer: false

# Use persistent volume for IS packages, configuration settings and logs ...
persistence:
  # -- Use persistent volume for IS packages, configuration settings and logs. If `persistence.existingClaim` not set, a claim will be automatically created.
  enabled:          false
  storageClassName: ""
  annotations:      {}
  # -- Use this existing and already created PVC.
  existingClaim:    ""
  accessMode:       ReadWriteOnce
  accessModes:      []
  # -- Size of Persistent Volume Claim
  size:             10M
  # -- if persistence.enabled=true, externalize packages / use packages from persistent volume
  packages:         true
  # -- if persistence.enabled=true, write logs to persistent volume
  logs:             true
  # -- if persistence.enabled=true, use configuration settings from persistent volume
  configs:          true

metering:
  # -- enable metering
  enabled: true
  # -- The URL of the metering aggregator server REST API.
  serverUrl: "https://metering.softwareag.cloud/api/measurements"
  # -- The type of the proxy that the metering client uses.
  # Valid values are:
  # *DIRECT (default).
  # *HTTP
  # *SOCKS
  # Indicates that the metering client does not use a proxy.
  proxyType: "DIRECT"
  # -- The proxy address in a <host>:<port> format that the metering client uses.
  # Configure this property only if you use a metering proxy.
  proxyAddress:
  # -- The proxy password that the metering client uses.
  # Configure this property only if you use a metering proxy with authentication.
  # Depending on the method that you use to provide a password, ensure that you escape password characters that are specific for the selected method.
  # Valid characters:
  # *Letters: A-Z, a-z
  # *Numbers: 0-9
  # *Special characters: !@#$%^&*()_+-=[]{}\/?,.<>;
  proxyPass:
  # -- The time in milliseconds to establish the initial TCP connection when the metering client calls the server REST endpoint. This is also the time to start the request.
  serverConnectTimeout: "60000"
  # -- The maximum time in milliseconds without data transfer over the TCP connection to the server. This is also the time that it takes for the server to respond. When this time passes, the request fails.
  serverReadTimeout: "300000"
  # -- The period in seconds for which data is accumulated before a log record is produced.
  accumulationPeriod: "1800"
  reportPeriod: "3600"
  # -- An alias of the webMethods product instance or a group of instances, for which usage data is measured.
  runtimeAlias:
  # -- The level of log messages that are logged on the console.
  # Valid values are:
  # *error - logs only ERROR messages.
  # *warn (default) - logs ERROR and WARN messages.
  # *info - logs ERROR, WARN, and INFO messages.
  # *debug - logs ERROR, WARN, INFO, and DEBUG messages. Use as a Java system property or an environment variable to see the debug messages of the configuration initialization.
  logLevel:
  # -- The absolute path to the metering client truststore that is used for HTTPS connections. Add this value in any of the following cases:
  # *If you use the Software AG Metering Server on premises (via HTTPS) and the certificates in the truststore do not match the certificates configured in Software AG Runtime (CTP).
  # *If you use a metering proxy that terminates the SSL connection to the Metering Server in Software AG Cloud.
  trustStoreFile:
  # -- The password for the metering client truststore.
  # Configure this property only if you use a truststore.
  trustStorePassword:


# Config for untracked that is not included in hashing for automated deplyment restarts
opsExtraConfigMaps: 
  smoke-soapui-tests:
    automount: false
    data:
      project.xml:
        <?xml version="1.0" encoding="UTF-8"?>
        <con:soapui-project id="91985c24-3ce7-446b-b412-ed8bf33713cb" activeEnvironment="Default" name="REST Project 1" soapui-version="5.7.2" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="47be29e0-43da-4321-b6f2-50b703f04ce6" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:5555" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:5555</con:endpoint></con:endpoints><con:resource name="Metrics" path="/metrics" id="40fa0cd2-8c0a-488c-baa2-d397b37c2283"><con:settings/><con:parameters/><con:method name="Metrics 1" id="2704786b-2dd4-4e68-9a72-08134279f44f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/plain</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="d6ba24c4-88dd-4a53-8493-3e222b4bf4c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:31111</con:endpoint><con:request/><con:originalUri>http://localhost/metrics</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="4d00f186-122c-4b58-8bd8-a263c00a3657" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="dc0dab7b-ab5c-45c9-b22a-a3d436317a97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Metrics 1 - Request 1" id="3179c3d6-7113-486b-b9fb-6ec6846fa398"><con:settings/><con:config service="http://localhost:5555" resourcePath="/metrics" methodName="Metrics 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Metrics 1 - Request 1" id="d6ba24c4-88dd-4a53-8493-3e222b4bf4c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:31111</con:endpoint><con:request/><con:originalUri>http://localhost/metrics</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>
      project-another.xml:
        <?xml version="1.0" encoding="UTF-8"?>
        <con:soapui-project id="91985c24-3ce7-446b-b412-ed8bf33713cb" activeEnvironment="Default" name="REST Project 1" soapui-version="5.7.2" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="47be29e0-43da-4321-b6f2-50b703f04ce6" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:5555" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://localhost:5555</con:endpoint></con:endpoints><con:resource name="Metrics" path="/metrics" id="40fa0cd2-8c0a-488c-baa2-d397b37c2283"><con:settings/><con:parameters/><con:method name="Metrics 1" id="2704786b-2dd4-4e68-9a72-08134279f44f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>text/plain</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="d6ba24c4-88dd-4a53-8493-3e222b4bf4c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:31111</con:endpoint><con:request/><con:originalUri>http://localhost/metrics</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="4d00f186-122c-4b58-8bd8-a263c00a3657" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="dc0dab7b-ab5c-45c9-b22a-a3d436317a97" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Metrics 1 - Request 1" id="3179c3d6-7113-486b-b9fb-6ec6846fa398"><con:settings/><con:config service="http://localhost:5555" resourcePath="/metrics" methodName="Metrics 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Metrics 1 - Request 1" id="d6ba24c4-88dd-4a53-8493-3e222b4bf4c3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="text/plain" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://localhost:31111</con:endpoint><con:request/><con:originalUri>http://localhost/metrics</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>

jobs:
  - name: smoke-tests-job
    annotations:
      argocd.argoproj.io/hook: PostSync
      argocd.argoproj.io/hook-delete-policy: HookSucceeded
    backOffLimit: 2
    ttlSecondsAfterFinished: 86400
    activeDeadlineSeconds: 600
    restartPolicy: OnFailure
    image:
      repository: smartbear/soapuios-testrunner
      tag: latest
      imagePullPolicy: IfNotPresent
    env:
      - name: SOAPUI_HOME
        value: /usr/local/SmartBear
    command:
      - /bin/sh
      - -c
      - |
        echo "Running SoapUI tests for all the projects..."
        PROJECT_DIR="/project" 
        # Loop over all XML files in the project directory
        for project_file in "$PROJECT_DIR"/*.xml; do
          if [ -f "$project_file" ]; then
            echo "Executing test for project: $project_file"
            $SOAPUI_HOME/$SOAPUI_DIR/bin/testrunner.sh -f "/reports" -r -j -e http://msrapp-microservicesruntime:5555 -aAI '$project_file'
          else
            echo "No XML files found in $PROJECT_DIR."
          fi
        done
        sleep 300
    volumes:
      - name: project-dir
        configMap:
          name: smoke-soapui-tests
      - name: reports-dir
        emptyDir: {}
    volumeMounts:
      - name: project-dir
        mountPath: "/project"
      - name: reports-dir
        mountPath: "/reports"
